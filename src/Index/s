import React,{useRef} from 'react'
import { Canvas } from '@react-three/fiber'
import { OrbitControls, shaderMaterial } from '@react-three/drei'
import * as THREE from  'three'
import { extend } from '@react-three/fiber'

const randomRange = (min, max) => Math.random() * (max - min) + min;
let curves = [] ;

for(let i = 0;i < 100 ; i++)
{
    let points = [];
    let length = randomRange(0.1, 1);
    for(let j = 0; j < 100 ; j++)
    {
            points.push(
                new THREE.Vector3().setFromSphericalCoords(
                    1,
                    Math.PI - (j / 100) * Math.PI * length,
                    (i / 100) * Math.PI * 2
                )
            );
        let tempcurve = new THREE.CatmullRomCurve3(points)
        curves.push(tempcurve);
    } 
}


console.log(curves);

function Tube({curve}) {

    const brainMat = useRef()

    const BrainMaterial = shaderMaterial(
        { time: 0, color: new THREE.Color(0.2, 0.4, 0.1) },
        // vertex shader
        /*glsl*/`
          varying vec2 vUv;
          void main() {
            vUv = uv;
            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
          }
        `,
        // fragment shader
        /*glsl*/`
          uniform float time;
          uniform vec3 color;
          varying vec2 vUv;
          void main() {
            gl_FragColor.rgba = vec4(1.,0..0.,1.);
          }
        `
      )
      
      // declaratively
      extend({ BrainMaterial })

    return(
        <mesh>
            <tubeGeometry args={[curve, 64, 0.01, 8, false]}/>
            <BrainMaterial ref={brainMat} color="#475812"/>
        </mesh>
    )
} 

function Tubes() {
    return(  
        <>
        {curves.map((curve, index)=>(
            <Tube curve={curve} key ={index} />
        ))}
        </>
    )
};

export default function ThreeD() {
  return (
    <div className='flex flex-col items-center justify-center w-full h-[100vh]'>
        <Canvas style={{ width: '100%', height: '100%' }}>
            <ambientLight intensity={2}/>
            <pointLight position={[10, 10, 10]} intensity={2}/>
            <directionalLight position={[10, 10, 5]} intensity={5} />
            <Tubes/>
            <OrbitControls/>  
        </Canvas>
    </div>
  )
}
